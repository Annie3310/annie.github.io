<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.annie.cafe</id>
    <title>Annie&apos;s Cafe</title>
    <updated>2022-10-08T03:36:18.354Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.annie.cafe"/>
    <link rel="self" href="https://blog.annie.cafe/atom.xml"/>
    <subtitle>Welcome</subtitle>
    <logo>https://blog.annie.cafe/images/avatar.png</logo>
    <icon>https://blog.annie.cafe/favicon.ico</icon>
    <rights>All rights reserved 2022, Annie&apos;s Cafe</rights>
    <entry>
        <title type="html"><![CDATA[Apache Common3 的 List 分片方法]]></title>
        <id>https://blog.annie.cafe/post/list-partition/</id>
        <link href="https://blog.annie.cafe/post/list-partition/">
        </link>
        <updated>2022-10-08T03:04:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; partition(List&lt;T&gt; list, int size) {
        if (list == null) {
            throw new NullPointerException(&quot;List must not be null&quot;);
        } else if (size &lt;= 0) {
            throw new IllegalArgumentException(&quot;Size must be greater than 0&quot;);
        } else {
            return new Partition(list, size);
        }
    }

    private static class Partition&lt;T&gt; extends AbstractList&lt;List&lt;T&gt;&gt; {
        private final List&lt;T&gt; list;
        private final int size;

        private Partition(List&lt;T&gt; list, int size) {
            this.list = list;
            this.size = size;
        }

        public List&lt;T&gt; get(int index) {
            int listSize = this.size();
            if (index &lt; 0) {
                throw new IndexOutOfBoundsException(&quot;Index &quot; + index + &quot; must not be negative&quot;);
            } else if (index &gt;= listSize) {
                throw new IndexOutOfBoundsException(&quot;Index &quot; + index + &quot; must be less than size &quot; + listSize);
            } else {
                int start = index * this.size;
                int end = Math.min(start + this.size, this.list.size());
                return this.list.subList(start, end);
            }
        }

        public int size() {
            return (int)Math.ceil((double)this.list.size() / (double)this.size);
        }

        public boolean isEmpty() {
            return this.list.isEmpty();
        }
    }
</code></pre>
<p>该方法使用了 <code>Partition&lt;T&gt; extends AbstractList&lt;List&lt;T&gt;&gt; </code> 类, 该类继承了 <code>AbstractList</code>, 并将泛型写为 <code>List&lt;T&gt;</code>, 这样 <code>new Partition()</code> 将可以用 <code>List&lt;List&lt;T&gt;&gt;</code> 类型来接收.</p>
<p><code>Partition</code> 中保存了完整的列表和分片大小, 并重写了 <code>get()</code> , <code>size()</code> 和 <code>isEmpty()</code>.</p>
<ul>
<li>首先看 <code>size()</code> 方法</li>
</ul>
<pre><code class="language-java">public int size() {
    return (int)Math.ceil((double)this.list.size() / (double)this.size);
}
</code></pre>
<p>该方法对 (完整列表大小 / 分片大小) 进行了向上取整(4.5 -&gt; 5), 以表示被分片后的列表数量.</p>
<ul>
<li>重点在 <code>get()</code> 方法</li>
</ul>
<p>该方法首先进行了 index 的边界判断.</p>
<pre><code class="language-java">int listSize = this.size();
if (index &lt; 0) {
    throw new IndexOutOfBoundsException(&quot;Index &quot; + index + &quot; must not be negative&quot;);
} else if (index &gt;= listSize) {
    throw new IndexOutOfBoundsException(&quot;Index &quot; + index + &quot; must be less than size &quot; + listSize);
}
</code></pre>
<p>index 不能为负数, 且不能大于或等于分片后的数量.</p>
<p>随后根据 index 和分片大小(size) 做运算对 List 进行分片.</p>
<pre><code class="language-java">int start = index * this.size;
int end = Math.min(start + this.size, this.list.size());
return this.list.subList(start, end);
</code></pre>
<p>通过 index * size 获得分片起始位置.</p>
<p>再通过 起始位置 + size 获取到分片结束位置, 如果要获取最后一段的分片且该片的大小 &lt; size, 则会取 list 的结尾作为分片结束位置.</p>
<p>这样便会在每次调用 get 的时候实时计算分片, 好处是写法简单, 便于开发, 坏处是每次 get 都需要计算, 属性时间换空间, 不过代价小到可以忽略不计.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 语言的日期格式化]]></title>
        <id>https://blog.annie.cafe/post/go-date-format/</id>
        <link href="https://blog.annie.cafe/post/go-date-format/">
        </link>
        <updated>2022-08-24T09:09:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="正文">正文</h2>
<p>假设你会其他语言但不会 Go 语言, 请说出看到下面这行代码时的第一反应</p>
<pre><code class="language-go">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))
</code></pre>
<p>这段代码的输出是</p>
<pre><code class="language-shell">// 写这段代码的时间
2022-08-24 17:12:08
</code></pre>
<p>根据经验 <code>time.Now()</code> 是获取现在的时间, 而 <code>Format()</code> 是格式化时间, 直到这一步和都符合以往的编程经验, 但是看到格式化参数时想必是一个头两个大.</p>
<p>按照 &quot;通常&quot; 的格式化规则, 这段代码应该是 <code>yyyy-MM-dd HH:mm:ss</code> 可为什么会是 <code>2006-01-02 15:04:05</code> 呢?</p>
<p>我的第一想法是这段可以用任何符合格式的日期代替, 结果使用 <code>2022-03-04 12:00:00</code> 来替换上面的时间串时, 输出确是这样的</p>
<pre><code class="language-shell">242424-05-17 824:00:00
</code></pre>
<p>综上可知, <code>2006-01-02 15:04:05</code> 这段代码是有含义的, 可 Go 语言发布于 2009 年, 按正常逻辑也不会用某个人的生日来做日期格式化这种操作.</p>
<p>于是我在 <a href="https://pkg.go.dev/time#Time.Format">Go 语言的文档</a>中找到了这样一段话</p>
<blockquote>
<p>The layout string used by the Parse function and Format method shows by example how the reference time should be represented. We stress that one must show how the reference time is formatted, not a time of the user's choosing. Thus each layout string is a representation of the time stamp,<br>
Jan 2 15:04:05 2006 MST<br>
An easy way to remember this value is that it holds, when presented in this order, the values (lined up with the elements above):<br>
1 2  3  4  5    6  -7</p>
</blockquote>
<p>简短来说:<br>
1, 2, 3, 4, 5 ,6, 7 分别代表了 月, 日, 小时 (3 是 12 小时制的 3 时, 15 则是 24 小时制中的 3 PM), 分, 秒, 年, 时区.<br>
06-01-02 03:04:05 就代表了 yy-MM-dd hh:mm:ss</p>
<p>这样的日期格式化方式好不好用见仁见智, 但脑洞是真的大.</p>
<h2 id="番外">番外</h2>
<p>有人注册过这样的域名 fuckinggodateformat.com, 不过已经被 DNS 劫持了, 不要访问.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://blog.annie.cafe/post/hello-gridea/</id>
        <link href="https://blog.annie.cafe/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>